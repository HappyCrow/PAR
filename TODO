MUST DO
-------
* change options syntax in order to make them even more easy to parse
  before this, have a look at option management in Python to see if
  there is already some library very simple and nice to do the job
  optparse seems to be the way to go
* make the NS thread a daemon one, this looks like the standard way
  to go in Python
* main became a pretty big function, cut it into sub-functions so we
  can read it on one screen
* for -p|--post: return both (stdin, stdout and stderr to the user), not just
  (stdin, stdout) like actually, so that he can troubleshoot if some of his
  commands fail in error by reading their stderr.
  Also, this could be quite useful in order to propagate in a parallel pipe
  all the information needed by downstream workers.

NICE TO HAVE
------------
* add a distributed test and also another but parallel and distributed
  I just did one by hand, it is not so difficult using ssh and commands
  that just sleep some time then echo something else in order to mimic
  they are CPU [but not data] intensive
* think about the security of the client-server model:
  - a client shouldn't accept to execute commands from an untrusted server
    (commands could be any Unix command, including rm)
  - server shouldn't accept to give commands to untrusted clients
    (this would deplete the commands list, probably without doing the
     corresponding jobs, and this would expose the commands)
  - a client for which command execution result in errors should not be able
    to deplete the commands list (at least, we should detect they were not
    performed and reschedule them later on. At most, we should not send him
    commands too fast)
* profile with the python profiler
* add a code coverage test, python is not compiled and pychecker is too
  light at checking things

JUST DREAMING
-------------
* The client could be at the same time a server for other clients in order to
  scale by using hierarchical layers of servers instead of having only one
  server managing too many clients (Russian doll/fractal architecture).
  This would be only useful in a multi-cluster environment, and such bridge
  between cluster servers would be easily a bottleneck for data transfer.
